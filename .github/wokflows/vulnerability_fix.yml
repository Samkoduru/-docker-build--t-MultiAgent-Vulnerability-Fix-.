name: "Vulnerability Scan & Fix"

on:
  workflow_dispatch:
    # Allows manual triggering from the "Actions" tab
    inputs:
      run-scan:
        description: "Run a vulnerability scan and fix"
        required: false

jobs:
  scan-fix:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the repo
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Set up Docker Buildx (optional, but recommended)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) Login to Docker registry (optional) if you push images
      # - name: Docker login
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # 4) Build the container
      - name: Build Docker image
        run: |
          docker build -t MultiAgent-Vulnerability-Fix .

      # 5) Run container in background
      - name: Run Docker container
        run: |
          docker run -d --name MultiAgent-Vulnerability-Fix \
            -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            -e SAFETY_API_TOKEN='${{ secrets.SAFETY_API_TOKEN }}' \
            -p 5000:5000 \
            MultiAgent-Vulnerability-Fix

      # 6) Safety scan inside container
      - name: Safety scan
        run: |
          # Run the scan and store output in /app
          docker exec MultiAgent-Vulnerability-Fix bash -c "safety scan --json > /app/safety_result.json"

      # 7) Parse & Fix
      - name: Parse & fix dependencies
        run: |
          docker exec MultiAgent-Vulnerability-Fix python -c "
          from agents.scanner_agent import parse_safety_report;
          from agents.fixer_agent import propose_dependency_fixes;
          v = parse_safety_report('/app/safety_result.json');
          updated = propose_dependency_fixes(v);
          print('Updated requirements:', updated);
          "

      # 8) Generate Explanation
      - name: Generate explanation
        run: |
          docker exec MultiAgent-Vulnerability-Fix python -c "
          from agents.scanner_agent import parse_safety_report;
          from agents.explanation_agent import generate_explanation;
          import agents.tools as t;

          v = parse_safety_report('/app/safety_result.json');
          new_reqs = t.read_requirements();
          explanation = generate_explanation(v, new_reqs);
          print('Explanation:', explanation);
          "

      # 9) (Optional) Copy updated requirements.txt back
      #    to see the changes in the Actions artifact
      - name: Copy updated requirements to artifact
        run: |
          docker cp MultiAgent-Vulnerability-Fix:/app/requirements.txt updated_requirements.txt

      # 10) (Optional) Upload artifact
      - name: Upload updated requirements artifact
        uses: actions/upload-artifact@v3
        with:
          name: updated_requirements
          path: updated_requirements.txt

      # 11) Stop and remove container
      - name: Cleanup
        run: |
          docker stop MultiAgent-Vulnerability-Fix
          docker rm MultiAgent-Vulnerability-Fix
