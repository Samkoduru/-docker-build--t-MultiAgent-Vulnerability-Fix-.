name: "Vulnerability Scan & Fix"

on:
  # 1) Manually triggered from the "Actions" tab
  workflow_dispatch:
    inputs:
      run-scan:
        description: "Run a vulnerability scan and fix"
        required: false
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  scan-fix:
    runs-on: ubuntu-latest

    steps:
      # 2) Check out the repo
      - name: Check out code
        uses: actions/checkout@v3

      # 3) Set up Docker Buildx (optional but useful)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4) Build the container
      - name: Build Docker image
        run: |
          docker build -t my_ai_security_app .

      # 5) Run container in background
      - name: Run Docker container
        run: |
          docker run -d --name my_ai_security_app \
            -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            -e SAFETY_API_TOKEN='${{ secrets.SAFETY_API_TOKEN }}' \
            -p 5000:5000 \
            my_ai_security_app

      # 6) Safety scan (store output in /app/safety_result.json)
      - name: Safety scan
        run: |
          docker exec my_ai_security_app bash -c "safety scan --json > /app/safety_result.json"

      # 7) Parse & Fix
      - name: Parse & fix dependencies
        run: |
          docker exec my_ai_security_app python -c "
          from agents.scanner_agent import parse_safety_report;
          from agents.fixer_agent import propose_dependency_fixes;
          v = parse_safety_report('/app/safety_result.json');
          updated = propose_dependency_fixes(v);
          print('Updated requirements:', updated);
          "

      # 8) Generate Explanation
      - name: Generate explanation
        run: |
          docker exec my_ai_security_app python -c "
          from agents.scanner_agent import parse_safety_report;
          from agents.explanation_agent import generate_explanation;
          import agents.tools as t;

          v = parse_safety_report('/app/safety_result.json');
          new_reqs = t.read_requirements();
          explanation = generate_explanation(v, new_reqs);
          print('Explanation:', explanation);
          "

      # 9) Copy updated requirements file (optional)
      - name: Copy updated requirements to artifact
        run: |
          docker cp my_ai_security_app:/app/requirements.txt updated_requirements.txt

      # 10) Upload artifact (optional) so you can download from GitHub
      - name: Upload updated requirements artifact
        uses: actions/upload-artifact@v3
        with:
          name: updated_requirements
          path: updated_requirements.txt

      # 11) Cleanup
      - name: Stop and remove container
        run: |
          docker stop my_ai_security_app
          docker rm my_ai_security_app
