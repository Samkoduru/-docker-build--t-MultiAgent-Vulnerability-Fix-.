from flask import Flask, request, render_template_string, session, redirect, url_for
import requests
import logging
import os
from cryptography.fernet import Fernet

app = Flask(__name__)
app.secret_key = "supersecretkey"  # Insecure usage for demonstration

# A global list to store users (insecurely storing credentials)
users_db = []

# Generate a random encryption key (not best practice to store in code):
if not os.path.exists("test.key"):
    with open("test.key", "wb") as key_file:
        key_file.write(Fernet.generate_key())

with open("test.key", "rb") as key_file:
    key = key_file.read()

cipher_suite = Fernet(key)

@app.route("/", methods=["GET"])
def home():
    return {"message": "Welcome to an Insecure Flask App with Outdated Packages!"}

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")

        # Insecurely storing password unencrypted in "database"
        # but let's also do some meaningless encryption for demonstration
        encrypted_password = cipher_suite.encrypt(password.encode()).decode()

        # Save user to global list
        users_db.append((username, encrypted_password))

        return {"status": "success", "msg": f"User {username} registered insecurely."}, 200

    # Simple HTML for a registration form (we use Jinja2)
    html = """
    <h1>Register</h1>
    <form method="POST" action="/register">
      <input type="text" name="username" placeholder="Username" required/>
      <input type="password" name="password" placeholder="Password" required/>
      <button type="submit">Register</button>
    </form>
    """
    return render_template_string(html)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")

        # Example of insecure check (no hashing, just naive compare)
        for usr, pwd_enc in users_db:
            # decrypt
            decrypted_pwd = cipher_suite.decrypt(pwd_enc.encode()).decode()
            if usr == username and decrypted_pwd == password:
                session["user"] = username
                return {"status": "success", "msg": f"Welcome, {username}!"}, 200

        return {"status": "failure", "msg": "Invalid credentials"}, 401

    html = """
    <h1>Login</h1>
    <form method="POST" action="/login">
      <input type="text" name="username" placeholder="Username" required/>
      <input type="password" name="password" placeholder="Password" required/>
      <button type="submit">Login</button>
    </form>
    """
    return render_template_string(html)

@app.route("/get_external_data", methods=["GET"])
def get_external_data():
    # Outdated requests usage, calls an external API
    r = requests.get("https://api.github.com/events")  # just an example
    return {"status": "ok", "data_length": len(r.json())}

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    # In older versions, debug might have known issues. We'll do it anyway.
    app.run(host="0.0.0.0", port=5000, debug=True)
